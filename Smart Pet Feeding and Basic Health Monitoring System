#define BLYNK_TEMPLATE_ID "TMPL6H4ggjG4y"
#define BLYNK_TEMPLATE_NAME "SmartPet"
#define BLYNK_AUTH_TOKEN "SFvhCDxNdT1pULjFCf9Izo-Zl3LkR4fd"

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <BlynkSimpleEsp32.h>
#include "HX711.h"
#include <ESP32Servo.h>
#include <TimeLib.h>
#include <WidgetRTC.h>
#include <math.h>
#include <UniversalTelegramBot.h>

// ====== WiFi Configuration ======
char ssid[] = "00";
char pass[] = "123456789";

// ====== Telegram Configuration ======
#define BOT_TOKEN "7905124249:AAGBpb9EwAk4_YeP-zsEHejRW-HsEF62auE"
#define CHAT_ID   "8243388341"

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

void sendTelegram(String msg) {
  if (WiFi.status() == WL_CONNECTED) {
    bot.sendMessage(CHAT_ID, msg, "");
    Serial.println("üì® ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ Telegram: " + msg);
  } else {
    Serial.println("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Telegram ‡πÑ‡∏î‡πâ (WiFi ‡∏´‡∏•‡∏∏‡∏î)");
  }
}

// ====== HX711 Configuration ======
#define LOADCELL_DOUT_PIN 19
#define LOADCELL_SCK_PIN 18
HX711 scale;

// ====== Servo Configuration ======
#define SERVO_PIN 17
Servo feederServo;

// ====== Calibration Factor ======
float calibration_factor = -7050.0;
float weight = 0.0;

// ====== Feeding Variables ======
float threshold = 5.0;
float targetWeight = 100.0;
float feedPortion = 0.0;
bool systemActive = false;

// ====== Feeding Calculation Variables ======
float dogWeightKg = 0.0;
int activityLevel = 1;
float kcalPerGram = 3.5;

// ====== Daily Summary Variables ======
int feedCountToday = 0;
float totalFeedWeight = 0.0;
float totalAccuracyPercent = 0.0;

// ====== Weekly Summary Variables ======
int dayCount = 0;
float weeklyFeedWeight = 0.0;
float weeklyAccuracy = 0.0;
int weeklyFeedCount = 0;

// ====== Timer ======
BlynkTimer timer;
WidgetRTC rtc;

// ====== Feeding Time Schedule ======
int breakfastHour = 8, breakfastMinute = 0;
int lunchHour = 13, lunchMinute = 0;
int dinnerHour = 19, dinnerMinute = 0;

// ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Servo ======
void openFeeder() {
  feederServo.write(180);
  Serial.println("üçΩÔ∏è [Servo] ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£...");
  Blynk.virtualWrite(V3, 1);
  sendTelegram("üçΩÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß üêæ");
}

void closeFeeder() {
  feederServo.write(0);
  Serial.println("üö´ [Servo] ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
  Blynk.virtualWrite(V3, 0);
  sendTelegram("‚úÖ ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
}

// ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô ======
float calcDailyKcal(float weight_kg, int actLevel) {
  float base = 110.0 * pow(weight_kg, 0.75);
  if (actLevel == 0) base *= 0.9;
  else if (actLevel == 2) base *= 1.1;
  return base;
}

float calcFeedGrams(float kcalNeeded, float kcalPerGram) {
  return kcalNeeded / kcalPerGram;
}

// ====== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ======
void computeTarget() {
  if (dogWeightKg > 0 && kcalPerGram > 0) {
    float kcalNeeded = calcDailyKcal(dogWeightKg, activityLevel);
    float grams = calcFeedGrams(kcalNeeded, kcalPerGram);
    targetWeight = grams;
    feedPortion = grams / 3.0;

    Serial.println("üìä [Feeding Calculation]");
    Serial.printf("  ‚ñ∏ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏™‡∏∏‡∏ô‡∏±‡∏Ç: %.2f kg\n", dogWeightKg);
    Serial.printf("  ‚ñ∏ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: %d\n", activityLevel);
    Serial.printf("  ‚ñ∏ kcal ‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏±‡∏°: %.2f\n", kcalPerGram);
    Serial.printf("  ‚ûú ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ %.2f kcal/‡∏ß‡∏±‡∏ô ‚âà %.2f g (‡∏°‡∏∑‡πâ‡∏≠‡∏•‡∏∞ %.2f g)\n\n", kcalNeeded, grams, feedPortion);

    Blynk.virtualWrite(V1, targetWeight);
    Blynk.virtualWrite(V10, feedPortion);

    String msg = "üìä ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß\n"
                 "üê∂ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: " + String(dogWeightKg, 1) + " kg\n"
                 "üèÉ‚Äç‚ôÇÔ∏è ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: " + String(activityLevel) + "\n"
                 "üçó ‡∏°‡∏∑‡πâ‡∏≠‡∏•‡∏∞: " + String(feedPortion, 1) + " g";
    sendTelegram(msg);
  } else {
    Serial.println("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì");
  }
}

// ====== kcal/‡∏Å‡∏£‡∏±‡∏° ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ======
void updateKcalPerGram() {
  if (dogWeightKg <= 0) return;

  if (dogWeightKg < 5) kcalPerGram = 3.8;
  else if (dogWeightKg < 15) kcalPerGram = 3.5;
  else kcalPerGram = 3.2;

  if (activityLevel == 0) kcalPerGram *= 0.95;
  else if (activityLevel == 2) kcalPerGram *= 1.05;

  Serial.printf("üî• [Auto kcal/gram]: %.2f kcal/g\n", kcalPerGram);
  Blynk.virtualWrite(V9, kcalPerGram);
}

// ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ======
void recordDailyFeed(float weightFed, float feedPortion) {
  feedCountToday++;
  totalFeedWeight += weightFed;
  float diffPercent = abs((weightFed - feedPortion) / feedPortion) * 100.0;
  totalAccuracyPercent += (100.0 - diffPercent);

  Serial.printf("üìù [Daily Record] ‡∏°‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà %d | ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ %.1f g | ‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô %.1f%%\n",
                feedCountToday, weightFed, diffPercent);

  sendTelegram("üïí ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà " + String(feedCountToday) +
               " ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì " + String(weightFed, 1) + " g");
}

// ====== ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ======
void sendWeeklyHealthSummary() {
  if (dayCount == 0) return;

  float avgFeedWeek = weeklyFeedWeight / dayCount;
  float avgAccuracyWeek = weeklyAccuracy / dayCount;
  float avgMeals = (float)weeklyFeedCount / dayCount;

  String status = "‚úÖ ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥";
  if (avgAccuracyWeek < 85) status = "‚ö†Ô∏è ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏¥‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á";
  else if (avgAccuracyWeek > 115) status = "‚ö†Ô∏è ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ";

  String weeklyReport = "üìÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå\n"
                        "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: " + String(dayCount) + "\n"
                        "üçΩÔ∏è ‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô: " + String(avgMeals, 1) + "\n"
                        "‚öñÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: " + String(avgFeedWeek, 1) + " g\n"
                        "üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: " + String(avgAccuracyWeek, 1) + "%\n"
                        "ü©∫ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: " + status;

  sendTelegram(weeklyReport);

  // üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  dayCount = 0;
  weeklyFeedCount = 0;
  weeklyFeedWeight = 0.0;
  weeklyAccuracy = 0.0;

  Serial.println("‚úÖ [Weekly Summary Sent]");
}

// ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ======
void sendDailyHealthSummary() {
  if (feedCountToday == 0) return;

  float avgFeed = totalFeedWeight / feedCountToday;
  float avgAccuracy = totalAccuracyPercent / feedCountToday;

  String status = "‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥";
  if (avgAccuracy < 85) status = "‚ö†Ô∏è ‡∏Å‡∏¥‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥";
  else if (avgAccuracy > 115) status = "‚ö†Ô∏è ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ";

  String summary = "üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô\n"
                   "üçΩÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏∑‡πâ‡∏≠: " + String(feedCountToday) + "\n"
                   "‚öñÔ∏è ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: " + String(avgFeed, 1) + " g\n"
                   "üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: " + String(avgAccuracy, 1) + "%\n"
                   "ü©∫ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: " + status;
  sendTelegram(summary);

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  weeklyFeedCount += feedCountToday;
  weeklyFeedWeight += avgFeed;
  weeklyAccuracy += avgAccuracy;
  dayCount++;

  // üîÅ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  feedCountToday = 0;
  totalFeedWeight = 0.0;
  totalAccuracyPercent = 0.0;

  // üìÜ ‡∏Ñ‡∏£‡∏ö 7 ‡∏ß‡∏±‡∏ô ‚Üí ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  if (dayCount >= 7) sendWeeklyHealthSummary();
}

// ====== ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å ======
void readWeight() {
  if (scale.is_ready()) {
    weight = -scale.get_units(10);
    if (abs(weight) < 1.0) weight = 0.0;

    Serial.printf("ü¶¥ [Weight] ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: %.2f g | ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢/‡∏°‡∏∑‡πâ‡∏≠: %.2f g\n", weight, feedPortion);
    Blynk.virtualWrite(V2, weight);

    if (systemActive && weight >= feedPortion) {
      closeFeeder();
      systemActive = false;

      recordDailyFeed(weight, feedPortion);

      if (feedCountToday >= 3) {
        sendTelegram("üìÖ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö 3 ‡∏°‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô...");
        sendDailyHealthSummary();
      }
    }
  } else {
    Serial.println("‚ùå [HX711] ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á");
  }
}

// ====== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ======
void checkFeedTime() {
  int h = hour();
  int m = minute();

  if ((h == breakfastHour && m == breakfastMinute) ||
      (h == lunchHour && m == lunchMinute) ||
      (h == dinnerHour && m == dinnerMinute)) {

    if (!systemActive) {
      openFeeder();
      systemActive = true;

      if (h == breakfastHour) sendTelegram("‚è∞ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤ üê∂");
      else if (h == lunchHour) sendTelegram("‚è∞ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á üêï");
      else if (h == dinnerHour) sendTelegram("‚è∞ ‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô üê©");
    }
  }
}

// ====== BLYNK INPUT ======
BLYNK_WRITE(V5) { TimeInputParam t(param); if (t.hasStartTime()) { breakfastHour = t.getStartHour(); breakfastMinute = t.getStartMinute(); }}
BLYNK_WRITE(V6) { TimeInputParam t(param); if (t.hasStartTime()) { lunchHour = t.getStartHour(); lunchMinute = t.getStartMinute(); }}
BLYNK_WRITE(V7) { TimeInputParam t(param); if (t.hasStartTime()) { dinnerHour = t.getStartHour(); dinnerMinute = t.getStartMinute(); }}
BLYNK_WRITE(V4) { int pinValue = param.asInt(); if (pinValue == 1 && !systemActive) { openFeeder(); systemActive = true; Blynk.virtualWrite(V4, 0); } }
BLYNK_WRITE(V11) { dogWeightKg = param.asFloat(); updateKcalPerGram(); computeTarget(); }
BLYNK_WRITE(V8) { activityLevel = param.asInt(); updateKcalPerGram(); computeTarget(); }

// ====== Setup ======
void setup() {
  delay(1000);
  Serial.begin(115200);
  Serial.println("üêæ Starting Smart Pet Feeding System with Weekly Summary...\n");

  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ WiFi Connected!");
  client.setInsecure();
  client.setTimeout(15000);

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  feederServo.setPeriodHertz(50);
  feederServo.attach(SERVO_PIN, 500, 2400);
  closeFeeder();

  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(calibration_factor);
  scale.tare();

  sendTelegram("üêæ ‡∏£‡∏∞‡∏ö‡∏ö SmartPet ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!");

  timer.setInterval(1000L, readWeight);
  timer.setInterval(60000L, checkFeedTime);
}

// ====== Loop ======
void loop() {
  Blynk.run();
  timer.run();
}
